receive message
{ body:  {
    "Time":"2021-08-10T14:40:39",
    "AM2301":{
        "Temperature":null,
        "Humidity":null,
        "DewPoint":null
    },
    "TempUnit":"C"
}',
properties: {b'topic': b'wemos-t1/SENSOR'},
offset: 17179875312, sequence_number: 362, enqueued_time=datetime.datetime(2021, 8, 10, 13, 40, 39, 565000, tzinfo=datetime.timezone.utc) }
----
{ body: '{
    "Time":"2021-08-10T14:40:39","Uptime":"0T00:00:10","UptimeSec":10,"Heap":21,"SleepMode":"Dynamic","Sleep":50,
    "LoadAvg":24,"MqttCount":1,
    "POWER1":"OFF","POWER2":"OFF","Wifi":{"AP":1,"SSId":"Linksys27961","BSSId":"60:38:E0:8B:59:1C",
    "Channel":12,"Mode":"11n","RSSI":100,"Signal":-36,"LinkCount":1,"Downtime":"0T00:00:03"}}',
    properties: {b'topic': b'wemos-t1/STATE'}, offset: 17179874600, sequence_number: 361,
    enqueued_time=datetime.datetime(2021, 8, 10, 13, 40, 39, 190000, tzinfo=datetime.timezone.utc) }

TASMOTA
SUBJECT = payload['properties']['topic'] = wemos-t1/STATE
SUBJECT.split('/')

device_id = SUBJECT[0]
type = SUBJECT[1]

RECOGNIZE FIRMWARE by payload
abstractDevice = AbstractDevive(payload)
identify = abstractDevice.identify() = {
    'device_id': types[0],
    'device_type': types[1]
}

SEARCH IN DATABASE
get device by identify[device_id] and identify[device_type]

FOUND IN DATABASE
devices = [
    {
        name: '',
        type: sensor or relay,
        firmware: simulated or tasmota
        gpio: 1-6 or None
        sensor_type: am2302
        updated_at: ''
        readings: {'Temperature': 23, 'Humidity': 33}
    }
]

LOAD FACTORY
for device in devices:
    if device['firmware'] == 'tasmota':
        firmwareFactory = TasmotaFactory()

    elif device['type'] == 'simulated':
       firmwareFactory = SimulatedFactory()

    if device['type'] == 'relay':
        factory = Relay(firmwareFactory)

    elif device['type'] == 'sensor':
        factory = Sensor(firmwareFactory)


    readings = factory.get_redings()
    update_redings(readings, device)